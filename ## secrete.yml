## secrete 
-----------

oc create secret generic mongo-secret \
  --from-literal=MONGO_INITDB_ROOT_USERNAME=admin \
  --from-literal=MONGO_INITDB_ROOT_PASSWORD=securepassword


oc create secret

vim pvc.yaml
------------

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi


oc apply pvc.yaml
-----------------

oc deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-deployment
  labels:
    app: mongo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
      - name: mongo
        image: mongo:6
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: mongo-secret
              key: MONGO_INITDB_ROOT_USERNAME
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongo-secret
              key: MONGO_INITDB_ROOT_PASSWORD
        volumeMounts:
        - name: mongo-data
          mountPath: /data/db
      volumes:
      - name: mongo-data
        persistentVolumeClaim:
          claimName: mongo-pvc


create serice.yaml
--------------------

apiVersion: v1
kind: Service
metadata:
  name: mongo-service
spec:
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017
  selector:
    app: mongo


oc create service.yaml
-------------------------


Step 9: Connecting Your Node.js Application to MongoDB
Add the following environment variables to your Node.js deployment to connect with MongoDB securely.

oc set env deployment/nodejs-backend \
  MONGO_URI=mongodb://admin:securepassword@mongo-service:27017/mydatabase


Step 10: Test the MongoDB Connection
Run this command to enter the MongoDB pod and test the connection:


oc rsh <mongo-pod-name>
mongo -u admin -p securepassword --authenticationDatabase admin

show dbs

Step 11: Scaling MongoDB
For horizontal scaling, increase MongoDB replicas (for replica sets):

oc scale deployment/mongo-deployment --replicas=3
Step 12: Monitoring and Debugging
Check pod details:
 
oc describe pod <mongo-pod-name>
Monitor logs:

oc logs -f deployment/mongo-deployment
